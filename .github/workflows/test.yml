name: Zevrin CI

on:
  push:
    branches: [main, develop]
  pull_request:
  workflow_dispatch:

jobs:
  backend_ci:
    name: Backend - build, lint & tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    services:
      mongo:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Load variables from backend/.env (do not print them)
      - name: Load env from backend/.env
        uses: falti/dotenv-action@v1
        with:
          path: backend/.env
          log-variables: false

      # Optional: also make them available to all later steps as job-level env
      - name: Export loaded env to GITHUB_ENV
        run: |
          set -e
          while IFS='=' read -r key value; do
            # skip comments/empty
            [[ -z "$key" || "$key" =~ ^# ]] && continue
            echo "$key=${!key}" >> "$GITHUB_ENV"
          done < <(grep -E '^[A-Za-z_][A-Za-z0-9_]*=' backend/.env)

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # ---------- 1) Build Docker image ----------
      - name: Build backend image
        run: docker build -t my-app-backend:${{ github.sha }} .

      - name: Verify container starts
        env:
          # If app uses python-dotenv internally, it may not need this.
          # Keeping in case your image relies on env at runtime.
          MONGODB_URL: ${{ env.MONGODB_URL }}
        run: |
          docker run -d --name backend-test -p 8000:8000 \
            -e MONGODB_URL="${MONGODB_URL:-mongodb://localhost:27017}" \
            my-app-backend:${{ github.sha }}
          for i in {1..30}; do
            curl -sSf http://localhost:8000/docs && exit 0 || sleep 2
          done
          echo "API did not become ready in time" && exit 1

      # ---------- 2) Lint / formatting ----------
      - name: Install dev deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Lint & format
        run: make styles

      # ---------- 3) Tests ----------
      - name: Install test deps
        run: |
          if [ -f requirements-test.txt ]; then pip install -r requirements-test.txt; fi
          pip install pytest

      # If no tests yet, create a tiny stub so CI does not fail
      - name: Create stub test if missing
        run: |
          mkdir -p tests
          if ! ls tests/test_*.py >/dev/null 2>&1; then
            cat > tests/test_stub.py << 'PY'
            def test_stub():
                assert True
            PY
          fi

      - name: Run pytest
        env:
          MONGODB_URL: ${{ env.MONGODB_URL }}
        run: pytest tests/test_run.py -v --tb=short

      - name: Upload coverage report (optional)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-backend
          path: backend/htmlcov
          retention-days: 7

  frontend_styles:
    name: Frontend - lint & format
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Lint CSS/JS
        run: |
          pnpm run lint
          pnpm run format:check
